#include "uthash.h"
#include "utlist.h"
#include <babeltrace2/babeltrace.h>
#include <stdio.h>
#include <stdlib.h>

#include "create.h"
#include "component.h"

/* Loosely inspired by
 * https://babeltrace.org/docs/v2.0/libbabeltrace2/example-simple-src-cmp-cls.html 
 */

/* Message iterator's private data */
struct <%= component_name %>_message_iterator {
  /* (Weak) link to the component's private data */
  struct <%= component_name %>_common_data *common_data;
};

/*
 *  Handle Upstream Messages
 */
static
bt_message_iterator_class_next_method_status source_message_iterator_next(
        bt_self_message_iterator *self_message_iterator,
        bt_message_array_const messages, uint64_t capacity,
        uint64_t *count)
{
  /* Retrieve our private data from the message iterator's user data */
  struct <%= component_name %>_message_iterator *<%= component_name %>_iter =
      bt_self_message_iterator_get_data(self_message_iterator);

  struct <%= component_name %>_common_data *common_data =
      <%= component_name %>_iter->common_data;

  /* Initialize the return status to a success */
  bt_message_iterator_class_next_method_status status =
    BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_OK;

  /* When you return BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_END, you must not put any message into the message array */
  if (!common_data->queue) 
       status= BT_MESSAGE_ITERATOR_CLASS_NEXT_METHOD_STATUS_END;

 for (*count = 0; *count < capacity && common_data->queue; (*count)++) {
    struct el *elt = common_data->queue;
    messages[*count] = elt->message;
    DL_DELETE(common_data->queue, elt);
    // Put it back to the bool of chain for reuse
    DL_APPEND(common_data->pool, elt);
  }

  return status;
}

/*
 * Initializes the source component.
 */
bt_component_class_initialize_method_status source_initialize(
        bt_self_component_source *self_component_source,
        bt_self_component_source_configuration *configuration,
        const bt_value *params, void *initialize_method_data)
{
  /* Allocate a private data structure */
  struct <%= component_name %>_common_data *common_data =
      calloc(1, sizeof(struct <%= component_name %>_common_data));

 
    /* Upcast `self_component_source` to the `bt_self_component` type */
    bt_self_component *self_component =
        bt_self_component_source_as_self_component(self_component_source);

    bt_trace_class *trace_class =
        btx_downstream_trace_class_create_rec(self_component);

    /* Instantiate a `downstream_trace` of `trace_class` and all the children
     * stream */
    common_data->downstream_trace = btx_downstream_trace_create_rec(trace_class);
 
    /* Set the component's user data to our private data structure */
    bt_self_component_set_data(self_component, common_data);

    /*
     * Add an output port named `out` to the source component.
     *
     * This is needed so that this source component can be connected to
     * a filter or a sink component. Once a downstream component is
     * connected, it can create our message iterator.
     */
    bt_self_component_source_add_output_port(self_component_source,
        "out", NULL, NULL);
 
    return BT_COMPONENT_CLASS_INITIALIZE_METHOD_STATUS_OK;
}

/*
 * Initializes the message iterator.
 */
static bt_message_iterator_class_initialize_method_status
source_message_iterator_initialize(
    bt_self_message_iterator *self_message_iterator,
    bt_self_message_iterator_configuration *configuration,
    bt_self_component_port_output *self_port) {
  /* Allocate a private data structure */
  struct <%= component_name %>_message_iterator *<%= component_name %>_iter =
      malloc(sizeof(*<%= component_name %>_iter));

  /* Retrieve the component's private data from its user data */
  struct <%= component_name %>_common_data *<%= component_name %>_common_data =
      bt_self_component_get_data(
          bt_self_message_iterator_borrow_component(self_message_iterator));

  /* Save a link to the self_message_iterator */
  <%= component_name %>_common_data->self_message_iterator =
      self_message_iterator;

  /* Keep a link to the component's private data */
  <%= component_name %>_iter->common_data = <%= component_name %>_common_data;

  /* Enqueue all the message stream creation */
  //btx_enqueue_messages_stream_beginnng_create(self_message_iterator, <%= component_name %>_common_data->trace);

  bt_stream *stream = bt_trace_borrow_stream_by_index(
       <%= component_name %>_common_data->downstream_trace, 0);
  // Need for the muxer
  bt_message* message = bt_message_stream_beginning_create(self_message_iterator, stream);
  btx_downstream_push_message( <%= component_name %>_common_data, message);

  btx_push_message_lttng_ust_ze_profiling_event_profiling_results( <%= component_name %>_common_data, 10, 10, 20);

  bt_message* message2 = bt_message_stream_end_create(self_message_iterator, stream);
  btx_downstream_push_message( <%= component_name %>_common_data, message2);

  /* Set the message iterator's user data to our private data structure */
  bt_self_message_iterator_set_data(self_message_iterator,
                                    <%= component_name %>_iter);

  return BT_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD_STATUS_OK;
}

static void source_finalize(bt_self_component_source *self_component_source) {
  struct <%= component_name %>_common_data *common_data =
      bt_self_component_get_data(
          bt_self_component_source_as_self_component(self_component_source));
  /* Free the allocated structure */
  free(common_data->usr_data);

  struct el *elt, *tmp;
  DL_FOREACH_SAFE(common_data->pool, elt, tmp) {
    DL_DELETE(common_data->pool, elt);
    free(elt);
  }
  free(common_data);
}

static void source_message_iterator_finalize(
    bt_self_message_iterator *self_message_iterator) {
  /* Retrieve our private data from the message iterator's user data */
  struct <%= component_name %>_message_iterator *<%= component_name %>_iter =
      bt_self_message_iterator_get_data(self_message_iterator);

  /* Free the allocated structure */
  free(<%= component_name %>_iter);
}

/* Mandatory */
BT_PLUGIN_MODULE();

BT_PLUGIN(<%= plugin_name %>);
BT_PLUGIN_SOURCE_COMPONENT_CLASS(<%= component_name %>,
                                 source_message_iterator_next);

BT_PLUGIN_SOURCE_COMPONENT_CLASS_INITIALIZE_METHOD(<%= component_name %>,
                                                   source_initialize);
BT_PLUGIN_SOURCE_COMPONENT_CLASS_FINALIZE_METHOD(<%= component_name %>,
                                                 source_finalize);
BT_PLUGIN_SOURCE_COMPONENT_CLASS_MESSAGE_ITERATOR_CLASS_INITIALIZE_METHOD(
    <%= component_name %>, source_message_iterator_initialize);
BT_PLUGIN_SOURCE_COMPONENT_CLASS_MESSAGE_ITERATOR_CLASS_FINALIZE_METHOD(
    <%= component_name %>, source_message_iterator_finalize);
